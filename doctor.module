<?php
/**
 * @file
 * Doctor module file.
 */

// The cache name for the doctor listeners handlers.
define('DOCTOR_LISTENER_CACHE', 'doctor_listener_info');

/**
 * Implements hook_entity_info().
 */
function doctor_entity_info() {
  $return = array(
    'doctor' => array(
      'label' => t('Doctor'),
      'controller class' => 'doctorEntity',
      'base table' => 'doctor',
      'entity keys' => array(
        'id' => 'id',
      ),
    ),
  );

  return $return;
}

/**
 * Create a doctor listener item.
 *
 * @param $data
 *  Data that will be store in the doctor listener in the DB entry.
 * @param $time
 *  The time the item created.
 *
 * @return
 *  The entity object of the listener item.
 */
function doctor_create($data, $time = NULL) {
  $values = array(
    'data' => $data,
    'created' => $time == NULL ? time() : $time,
  );

  return entity_create('doctor', $values);
}

/**
 * Load a doctor item.
 *
 * @param $id
 *  The doctor item.
 *
 * @return
 *  The doctor item object.
 */
function doctor_load($id) {
  $results = entity_load('doctor', array($id));
  return reset($results);
}

/**
 * Load multiple doctor listen items.
 *
 * @param $ids
 *  List of IDs to load.
 *
 * @return
 *  List of doctor listen items.
 */
function doctor_load_multiple($ids) {
  return entity_load('doctor', $ids);
}

/**
 * Get all the listener items.
 */
function doctor_items() {
  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'doctor')
    ->propertyOrderBy('created')
    ->execute();

  if (empty($result['doctor'])) {
    return;
  }

  return doctor_load_multiple(array_keys($result['doctor']));
}

/**
 * Gather the handlers for the listeners.
 */
function doctor_listener_handler() {
  if ($cache = cache_get(DOCTOR_LISTENER_CACHE)) {
    $doctor_listener_handler = $cache->data;
  }
  else {
    // Collect all the doctor listeners handlers.
    $doctor_listener_handler = module_invoke_all('doctor_listener_info');

    // Let other modules to alter the module.
    drupal_alter('doctor_listener_info', $info);

    cache_set(DOCTOR_LISTENER_CACHE, $doctor_listener_handler, 'cache');
  }

  return $doctor_listener_handler;
}
